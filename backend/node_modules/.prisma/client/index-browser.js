
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: "6.13.0",
  engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  user_id: 'user_id',
  name: 'name',
  email: 'email',
  password: 'password',
  profile_image: 'profile_image',
  role: 'role',
  isVerified: 'isVerified',
  isMainAdmin: 'isMainAdmin',
  verifyToken: 'verifyToken',
  created_at: 'created_at'
};

exports.Prisma.AdminScalarFieldEnum = {
  admin_id: 'admin_id',
  user_id: 'user_id'
};

exports.Prisma.DepartmentScalarFieldEnum = {
  department_id: 'department_id',
  department_name: 'department_name'
};

exports.Prisma.DomainScalarFieldEnum = {
  domain_id: 'domain_id',
  domain_name: 'domain_name'
};

exports.Prisma.DepartmentdomainScalarFieldEnum = {
  department_id: 'department_id',
  domain_id: 'domain_id'
};

exports.Prisma.GeneraluserScalarFieldEnum = {
  generaluser_id: 'generaluser_id',
  user_id: 'user_id'
};

exports.Prisma.StudentScalarFieldEnum = {
  student_id: 'student_id',
  roll_number: 'roll_number',
  department_id: 'department_id',
  user_id: 'user_id'
};

exports.Prisma.TeacherScalarFieldEnum = {
  teacher_id: 'teacher_id',
  designation: 'designation',
  department_id: 'department_id',
  user_id: 'user_id',
  isReviewer: 'isReviewer'
};

exports.Prisma.ReviewerScalarFieldEnum = {
  reviewer_id: 'reviewer_id',
  teacher_id: 'teacher_id',
  status: 'status'
};

exports.Prisma.TeamScalarFieldEnum = {
  team_id: 'team_id',
  team_name: 'team_name',
  team_description: 'team_description',
  domain_id: 'domain_id',
  status: 'status',
  visibility: 'visibility',
  max_members: 'max_members',
  isHiring: 'isHiring',
  created_at: 'created_at',
  created_by_user_id: 'created_by_user_id'
};

exports.Prisma.TeammemberScalarFieldEnum = {
  team_id: 'team_id',
  user_id: 'user_id',
  role_in_team: 'role_in_team'
};

exports.Prisma.TeamapplicationScalarFieldEnum = {
  application_id: 'application_id',
  team_id: 'team_id',
  student_id: 'student_id',
  status: 'status',
  applied_at: 'applied_at'
};

exports.Prisma.TeamcommentScalarFieldEnum = {
  comment_id: 'comment_id',
  team_id: 'team_id',
  user_id: 'user_id',
  comment: 'comment',
  created_at: 'created_at'
};

exports.Prisma.PaperScalarFieldEnum = {
  paper_id: 'paper_id',
  title: 'title',
  abstract: 'abstract',
  status: 'status',
  team_id: 'team_id',
  submitted_by: 'submitted_by',
  pdf_path: 'pdf_path',
  file_size: 'file_size',
  created_at: 'created_at',
  aggregated_decided_at: 'aggregated_decided_at',
  aggregated_decision: 'aggregated_decision'
};

exports.Prisma.ProposalScalarFieldEnum = {
  proposal_id: 'proposal_id',
  title: 'title',
  abstract: 'abstract',
  status: 'status',
  team_id: 'team_id',
  submitted_by: 'submitted_by',
  pdf_path: 'pdf_path',
  file_size: 'file_size',
  created_at: 'created_at',
  aggregated_decided_at: 'aggregated_decided_at',
  aggregated_decision: 'aggregated_decision'
};

exports.Prisma.ReviewScalarFieldEnum = {
  review_id: 'review_id',
  reviewer_id: 'reviewer_id',
  proposal_id: 'proposal_id',
  paper_id: 'paper_id',
  comments: 'comments',
  score: 'score',
  reviewed_at: 'reviewed_at',
  attachment_path: 'attachment_path',
  decision: 'decision'
};

exports.Prisma.ReviewerassignmentScalarFieldEnum = {
  assignment_id: 'assignment_id',
  reviewer_id: 'reviewer_id',
  proposal_id: 'proposal_id',
  paper_id: 'paper_id',
  assigned_date: 'assigned_date',
  due_date: 'due_date',
  status: 'status',
  completed_at: 'completed_at',
  started_at: 'started_at'
};

exports.Prisma.UserdomainScalarFieldEnum = {
  user_id: 'user_id',
  domain_id: 'domain_id'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Role = exports.$Enums.Role = {
  ADMIN: 'ADMIN',
  TEACHER: 'TEACHER',
  REVIEWER: 'REVIEWER',
  STUDENT: 'STUDENT',
  GENERALUSER: 'GENERALUSER'
};

exports.ReviewerStatus = exports.$Enums.ReviewerStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  SUSPENDED: 'SUSPENDED',
  PENDING: 'PENDING'
};

exports.TeamStatus = exports.$Enums.TeamStatus = {
  ACTIVE: 'ACTIVE',
  RECRUITING: 'RECRUITING',
  INACTIVE: 'INACTIVE'
};

exports.TeamVisibility = exports.$Enums.TeamVisibility = {
  PUBLIC: 'PUBLIC',
  PRIVATE: 'PRIVATE'
};

exports.TeamRole = exports.$Enums.TeamRole = {
  LEAD: 'LEAD',
  RESEARCHER: 'RESEARCHER',
  ASSISTANT: 'ASSISTANT'
};

exports.ApplicationStatus = exports.$Enums.ApplicationStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.PaperStatus = exports.$Enums.PaperStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  UNDER_REVIEW: 'UNDER_REVIEW'
};

exports.ReviewDecision = exports.$Enums.ReviewDecision = {
  ACCEPT: 'ACCEPT',
  REJECT: 'REJECT',
  MINOR_REVISIONS: 'MINOR_REVISIONS',
  MAJOR_REVISIONS: 'MAJOR_REVISIONS'
};

exports.AssignmentStatus = exports.$Enums.AssignmentStatus = {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  OVERDUE: 'OVERDUE'
};

exports.Prisma.ModelName = {
  user: 'user',
  admin: 'admin',
  department: 'department',
  domain: 'domain',
  departmentdomain: 'departmentdomain',
  generaluser: 'generaluser',
  student: 'student',
  teacher: 'teacher',
  reviewer: 'reviewer',
  team: 'team',
  teammember: 'teammember',
  teamapplication: 'teamapplication',
  teamcomment: 'teamcomment',
  paper: 'paper',
  proposal: 'proposal',
  review: 'review',
  reviewerassignment: 'reviewerassignment',
  userdomain: 'userdomain'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
