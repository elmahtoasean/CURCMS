generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  user_id       Int           @id @default(autoincrement())
  name          String?
  email         String?       @unique
  password      String?
  profile_image String?
  role          Role?
  isVerified    Boolean       @default(false)
  isMainAdmin   Boolean       @default(false)
  verifyToken   String?
  created_at    DateTime      @default(now())
  admin         admin[]
  generaluser   generaluser[]
  student       student[]
  teacher       teacher[]
  team          team[]
  teamcomment   teamcomment[]
  teammember    teammember[]
  userdomain    userdomain[]
}

model admin {
  admin_id Int   @id @default(autoincrement())
  user_id  Int?
  user     user? @relation(fields: [user_id], references: [user_id])
}

model department {
  department_id    Int                @id @default(autoincrement())
  department_name  String?            @unique
  departmentdomain departmentdomain[]
  students         student[]
  teachers         teacher[]
}

model domain {
  domain_id        Int                @id @default(autoincrement())
  domain_name      String?            @unique
  departmentdomain departmentdomain[]
  team             team[]
  userdomain       userdomain[]
}

model departmentdomain {
  department_id Int
  domain_id     Int
  department    department @relation(fields: [department_id], references: [department_id])
  domain        domain     @relation(fields: [domain_id], references: [domain_id])

  @@id([department_id, domain_id])
}

model generaluser {
  generaluser_id Int   @id @default(autoincrement())
  user_id        Int?
  user           user? @relation(fields: [user_id], references: [user_id])
}

model student {
  student_id      Int               @id @default(autoincrement())
  roll_number     String?
  department_id   Int?
  user_id         Int?
  department      department?       @relation(fields: [department_id], references: [department_id])
  user            user?             @relation(fields: [user_id], references: [user_id])
  teamapplication teamapplication[]
}

model teacher {
  teacher_id    Int         @id @default(autoincrement())
  designation   String?
  department_id Int?
  user_id       Int?
  isReviewer    Boolean     @default(false)
  paper         paper[]
  proposal      proposal[]
  reviewer      reviewer?
  department    department? @relation(fields: [department_id], references: [department_id])
  user          user?       @relation(fields: [user_id], references: [user_id])
}

model reviewer {
  reviewer_id        Int                  @id @default(autoincrement())
  teacher_id         Int?                 @unique
  status             ReviewerStatus?      @default(ACTIVE)
  review             review[]
  teacher            teacher?             @relation(fields: [teacher_id], references: [teacher_id])
  reviewerassignment reviewerassignment[]
}

model team {
  team_id            Int               @id @default(autoincrement())
  team_name          String?
  team_description   String?
  domain_id          Int?
  status             TeamStatus?
  visibility         TeamVisibility?
  max_members        Int?
  isHiring           Boolean?
  created_at         DateTime          @default(now())
  created_by_user_id Int?
  paper              paper[]
  proposal           proposal[]
  created_by_user    user?             @relation(fields: [created_by_user_id], references: [user_id])
  domain             domain?           @relation(fields: [domain_id], references: [domain_id])
  teamapplication    teamapplication[]
  teamcomment        teamcomment[]
  teammember         teammember[]
}

model teammember {
  team_id      Int
  user_id      Int
  role_in_team TeamRole?
  team         team      @relation(fields: [team_id], references: [team_id])
  user         user      @relation(fields: [user_id], references: [user_id])

  @@id([team_id, user_id])
}

model teamapplication {
  application_id Int               @id @default(autoincrement())
  team_id        Int
  student_id     Int
  status         ApplicationStatus @default(PENDING)
  applied_at     DateTime          @default(now())
  student        student           @relation(fields: [student_id], references: [student_id])
  team           team              @relation(fields: [team_id], references: [team_id])

  @@unique([team_id, student_id])
}

model teamcomment {
  comment_id Int      @id @default(autoincrement())
  team_id    Int
  user_id    Int
  comment    String
  created_at DateTime @default(now())
  team       team     @relation(fields: [team_id], references: [team_id])
  user       user     @relation(fields: [user_id], references: [user_id])
}

model paper {
  paper_id              Int                  @id @default(autoincrement())
  title                 String?
  abstract              String?
  status                PaperStatus?         @default(PENDING)
  team_id               Int?
  submitted_by          Int?
  pdf_path              String?
  file_size             Int?
  created_at            DateTime             @default(now())
  aggregated_decided_at DateTime?
  aggregated_decision   ReviewDecision?
  teacher               teacher?             @relation(fields: [submitted_by], references: [teacher_id])
  team                  team?                @relation(fields: [team_id], references: [team_id])
  review                review[]
  reviewerassignment    reviewerassignment[]
}

model proposal {
  proposal_id           Int                  @id @default(autoincrement())
  title                 String?
  abstract              String?
  status                PaperStatus?         @default(PENDING)
  team_id               Int?
  submitted_by          Int?
  pdf_path              String?
  file_size             Int?
  created_at            DateTime             @default(now())
  aggregated_decided_at DateTime?
  aggregated_decision   ReviewDecision?
  teacher               teacher?             @relation(fields: [submitted_by], references: [teacher_id])
  team                  team?                @relation(fields: [team_id], references: [team_id])
  review                review[]
  reviewerassignment    reviewerassignment[]
}

model review {
  review_id       Int             @id @default(autoincrement())
  reviewer_id     Int?
  proposal_id     Int?
  paper_id        Int?
  comments        String?
  score           Int?
  reviewed_at     DateTime        @default(now())
  attachment_path String?
  decision        ReviewDecision?
  paper           paper?          @relation(fields: [paper_id], references: [paper_id])
  proposal        proposal?       @relation(fields: [proposal_id], references: [proposal_id])
  reviewer        reviewer?       @relation(fields: [reviewer_id], references: [reviewer_id])
}

model reviewerassignment {
  assignment_id Int              @id @default(autoincrement())
  reviewer_id   Int
  proposal_id   Int?
  paper_id      Int?
  assigned_date DateTime         @default(now())
  due_date      DateTime
  status        AssignmentStatus @default(PENDING)
  completed_at  DateTime?
  started_at    DateTime?
  paper         paper?           @relation(fields: [paper_id], references: [paper_id])
  proposal      proposal?        @relation(fields: [proposal_id], references: [proposal_id])
  reviewer      reviewer         @relation(fields: [reviewer_id], references: [reviewer_id])
}

model userdomain {
  user_id   Int
  domain_id Int
  domain    domain @relation(fields: [domain_id], references: [domain_id])
  user      user   @relation(fields: [user_id], references: [user_id])

  @@id([user_id, domain_id])
}

enum Role {
  ADMIN
  TEACHER
  REVIEWER
  STUDENT
  GENERALUSER
}

enum TeamStatus {
  ACTIVE
  RECRUITING
  INACTIVE
}

enum TeamVisibility {
  PUBLIC
  PRIVATE
}

enum ReviewDecision {
  ACCEPT
  REJECT
  MINOR_REVISIONS
  MAJOR_REVISIONS
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum TeamRole {
  LEAD
  RESEARCHER
  ASSISTANT
}

enum PaperStatus {
  PENDING
  ACCEPTED
  REJECTED
  UNDER_REVIEW
}

enum ReviewerStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING
}

enum AssignmentStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  OVERDUE
}
